<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Rust 入门 - 环境搭建 Day 1</title>
    <link href="/2024/10/29/Rust%20%E5%85%A5%E9%97%A8%20-%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%20Day%201/"/>
    <url>/2024/10/29/Rust%20%E5%85%A5%E9%97%A8%20-%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%20Day%201/</url>
    
    <content type="html"><![CDATA[<h2 id="安装-Rust-环境"><a href="#安装-Rust-环境" class="headerlink" title="安装 Rust 环境"></a>安装 <strong>Rust</strong> 环境</h2><h3 id="安装-rustup"><a href="#安装-rustup" class="headerlink" title="安装 rustup"></a>安装 <code>rustup</code></h3><p>打开终端并输入下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ curl --proto <span class="hljs-string">&#x27;=https&#x27;</span> --tlsv1.2 https://sh.rustup.rs -sSf | sh<br></code></pre></td></tr></table></figure><p>如果安装成功，将出现下面这行:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Rust is installed now. Great!<br></code></pre></td></tr></table></figure><p><strong>可能出现的问题</strong></p><ul><li>下载源速度很慢，解决方案：1. 选择镜像站 2. 使用代理&#x2F;VPN等</li></ul><h3 id="检查安装是否成功"><a href="#检查安装是否成功" class="headerlink" title="检查安装是否成功"></a>检查安装是否成功</h3><p>检查是否正确安装了 Rust，可打开终端并输入下面这行，此时能看到最新发布的稳定版本的版本号、提交哈希值和提交日期：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">rustc -V<br>rustc 1.81.0 (eeb90cda1 2024-09-04)<br><br>cargo -V<br>cargo 1.81.0 (2dbb1af80 2024-08-20)<br></code></pre></td></tr></table></figure><h3 id="rustup常用命令"><a href="#rustup常用命令" class="headerlink" title="rustup常用命令"></a><code>rustup</code>常用命令</h3><ul><li>更新：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rustup update<br></code></pre></td></tr></table></figure></li><li>卸载<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rustup self uninstall<br></code></pre></td></tr></table></figure></li><li>本地文档，让浏览器打开本地文档<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rustup doc<br></code></pre></td></tr></table></figure></li></ul><h2 id="VS-Code-插件推荐"><a href="#VS-Code-插件推荐" class="headerlink" title="VS Code 插件推荐"></a>VS Code 插件推荐</h2><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer">rust-analyzer</a>，社区驱动的</li><li><a href="https://marketplace.visualstudio.com/items?itemName=tamasfe.even-better-toml">Even Better TOML</a>，支持 <code>.toml</code> 文件的完整特性</li><li><a href="https://marketplace.visualstudio.com/items?itemName=tamasfe.even-better-toml">Dependi</a>，依赖管理工具，代替<code>crates</code></li></ol><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><h3 id="编写-Rust-代码"><a href="#编写-Rust-代码" class="headerlink" title="编写 Rust 代码"></a>编写 Rust 代码</h3><p>新建一个源文件，Rust 源文件总是以 <code>.rs</code> 扩展名结尾。如果文件名包含多个单词，那么按照命名习惯，应当使用下划线来分隔单词。例如命名为 <code>hello_world.rs</code>，而不是 <code>helloworld.rs</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> hello_world<br><span class="hljs-built_in">cd</span> hello_world<br><span class="hljs-built_in">touch</span> main.rs<br></code></pre></td></tr></table></figure><p>打开刚创建的<code>main.rs</code> 文件，输入示例 1-1 代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>在运行 Rust 程序之前，必须先使用 Rust 编译器编译它，即输入 <code>rustc</code> 命令并传入源文件名称，如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rustc main.rs<br></code></pre></td></tr></table></figure><p>编译成功后，Rust会输出一个二进制的可执行文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ls</span><br>main main.rs<br></code></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>Rust 是一种 <strong>预编译静态类型(ahead-of-time compiled)语言</strong>，这意味着你可以编译程序，并将可执行文件送给其他人，他们甚至不需要安装 Rust 就可以运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">./main<br>Hello, World!<br></code></pre></td></tr></table></figure><h2 id="认识Cargo"><a href="#认识Cargo" class="headerlink" title="认识Cargo"></a>认识Cargo</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">cargo new hello_cargo<br><span class="hljs-built_in">cd</span> hello_cargo<br></code></pre></td></tr></table></figure><p>初始化的项目结构</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ tree<br>.<br>├── .git<br>├── .gitignore<br>├── Cargo.toml<br>└── src<br>    └── main.rs<br><br></code></pre></td></tr></table></figure><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>有两种方式可以运行项目：</p><ol><li><p><code>cargo run</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">❯ cargo run<br>   Compiling hello_cargo v0.1.0 (/Users/vic9527/Documents/rust/hello_cargo)<br>    Finished `dev` profile [unoptimized + debuginfo] target(s) <span class="hljs-keyword">in</span> 0.29s<br>     Running `target/debug/hello_cargo`<br>Hello, Cargo!<br></code></pre></td></tr></table></figure></li><li><p>手动编译和运行项目<br>编译</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">❯ cargo build<br>    Finished `dev` profile [unoptimized + debuginfo] target(s) <span class="hljs-keyword">in</span> 0.02s<br>    <br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">❯ ./target/debug/hello_cargo<br>Hello, Cargo!<br></code></pre></td></tr></table></figure></li></ol><h3 id="发布构建"><a href="#发布构建" class="headerlink" title="发布构建"></a>发布构建</h3><p>当项目最终准备好发布时，可以使用 <code>cargo build --release</code> 来优化编译项目</p><ul><li><p><code>debug</code>模式，<strong>代码的编译速度会非常快</strong>，但是<strong>运行速度就慢了</strong>。原因是，在 <code>debug</code> 模式下，Rust 编译器不会做任何的优化，只为了尽快的编译完成，让你的开发流程更加顺畅。</p></li><li><p><code>release</code>模式，<strong>高性能模式</strong>，为用户构建最终程序</p><ul><li><code>cargo run --release</code></li><li><code>cargo build --release</code></li></ul></li></ul><h3 id="Cargo-toml-和-Cargo-lock"><a href="#Cargo-toml-和-Cargo-lock" class="headerlink" title="Cargo.toml 和 Cargo.lock"></a>Cargo.toml 和 Cargo.lock</h3><p><code>Cargo.toml</code> 和 <code>Cargo.lock</code> 是 <code>cargo</code> 的核心文件，它的所有活动均基于此二者。</p><ul><li><p><code>Cargo.toml</code> 是 <code>cargo</code> 特有的<strong>项目数据描述文件</strong>。它存储了项目的所有元配置信息，如果 Rust 开发者希望 Rust 项目能够按照期望的方式进行构建、测试和运行，那么，必须按照合理的方式构建 <code>Cargo.toml</code>。</p></li><li><p><code>Cargo.lock</code> 文件是 <code>cargo</code> 工具根据同一项目的 <code>toml</code> 文件生成的<strong>项目依赖详细清单</strong>，因此我们一般不用修改它，只需要对着 <code>Cargo.toml</code> 文件撸就行了。</p><blockquote><p>什么情况下该把 <code>Cargo.lock</code> 上传到 git 仓库里？很简单，当你的项目是一个可运行的程序时，就上传 <code>Cargo.lock</code>，如果是一个依赖库项目，那么请把它添加到 <code>.gitignore</code> 中。</p></blockquote></li></ul><h3 id="package-配置段落"><a href="#package-配置段落" class="headerlink" title="package 配置段落"></a>package 配置段落</h3><p><code>package</code> 中记录了项目的描述信息，典型的如下：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[package]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;hello_cargo&quot;</span><br><span class="hljs-attr">version</span> = <span class="hljs-string">&quot;0.1.0&quot;</span><br><span class="hljs-attr">edition</span> = <span class="hljs-string">&quot;2021&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>name</code> 字段定义了项目名称</li><li><code>version</code> 字段定义当前版本，新项目默认是 <code>0.1.0</code></li><li><code>edition</code> 字段定义了我们使用的 Rust 大版本</li></ul><h3 id="定义项目依赖"><a href="#定义项目依赖" class="headerlink" title="定义项目依赖"></a>定义项目依赖</h3><p>使用 <code>cargo</code> 工具的最大优势就在于，能够对该项目的各种依赖项进行方便、统一和灵活的管理。</p><p>在 <code>Cargo.toml</code> 中，主要通过各种依赖段落来描述该项目的各种依赖项：</p><ul><li>基于 Rust 官方仓库 <code>crates.io</code>，通过版本说明来描述</li><li>基于项目源代码的 git 仓库地址，通过 URL 来描述</li><li>基于本地项目的绝对路径或者相对路径，通过类 Unix 模式的路径来描述</li></ul><p>这三种形式具体写法如下：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[dependencies]</span><br><span class="hljs-attr">rand</span> = <span class="hljs-string">&quot;0.3&quot;</span><br><span class="hljs-attr">hammer</span> = &#123; version = <span class="hljs-string">&quot;0.5.0&quot;</span>&#125;<br><span class="hljs-attr">color</span> = &#123; git = <span class="hljs-string">&quot;https://github.com/bjz/color-rs&quot;</span> &#125;<br><span class="hljs-attr">geometry</span> = &#123; path = <span class="hljs-string">&quot;crates/geometry&quot;</span> &#125;<br></code></pre></td></tr></table></figure><h2 id="下载依赖太慢"><a href="#下载依赖太慢" class="headerlink" title="下载依赖太慢"></a>下载依赖太慢</h2><ol><li><p>科技上网，不赘述</p></li><li><p>修改下载镜像</p><p> 修改配置文件，文件位置<code>$HOME/.cargo/config.toml</code></p></li></ol><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-comment"># 选择的镜像源</span><br><span class="hljs-comment"># 喜欢哪个用哪个吧，没有注释掉的那个就是你选择的</span><br><span class="hljs-comment">#replace-with = &#x27;ustc&#x27;</span><br><span class="hljs-comment">#replace-with = &#x27;tuna&#x27;</span><br><span class="hljs-comment">#replace-with = &#x27;sjtu&#x27;</span><br><span class="hljs-comment">#replace-with = &#x27;rustcc&#x27;</span><br><span class="hljs-attr">replace-with</span> = <span class="hljs-string">&#x27;aliyun&#x27;</span><br><br><span class="hljs-comment"># 源码地址</span><br><span class="hljs-section">[source.crates-io]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;https://github.com/rust-lang/crates.io-index&quot;</span><br><br><span class="hljs-comment"># 镜像地址</span><br><span class="hljs-comment"># 清华大学</span><br><span class="hljs-section">[source.tuna]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git&quot;</span><br><br><span class="hljs-comment"># 中国科学技术大学</span><br><span class="hljs-section">[source.ustc]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span><br><br><span class="hljs-comment"># 上海交通大学</span><br><span class="hljs-section">[source.sjtu]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index&quot;</span><br><br><span class="hljs-comment"># rustcc社区</span><br><span class="hljs-section">[source.rustcc]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;git://crates.rustcc.cn/crates.io-index&quot;</span><br><br><span class="hljs-comment"># 阿里云</span><br><span class="hljs-section">[source.aliyun]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;https://code.aliyun.com/rustcc/crates.io-index&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
